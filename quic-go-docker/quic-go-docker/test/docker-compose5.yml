#对docker网络：  5ms 延时

services:
  relay-server:
    build:
      context: .
      dockerfile: Dockerfile
    command:  >
      sh -c "\
        ./hp s :9595"
    image: quic_holepunch_docker
    privileged: true
    cap_add:
      - NET_ADMIN
    volumes:
      - /var/run/docker/netns:/var/run/docker/netns
    networks:
      relay_network:
        ipv4_address: 123.56.64.101

  clientA-nat:
    depends_on:
      - relay-server
    command: >
      sh -c "\
        iptables --append FORWARD --jump ACCEPT && \
        iptables --append INPUT --jump DROP && \
        iptables --append OUTPUT --jump DROP && \
        iptables --table nat --append POSTROUTING --source 192.168.0.0/24 --jump SNAT --to-source 123.56.64.102 && \
        iptables --insert INPUT --protocol icmp --jump ACCEPT
        iptables --insert OUTPUT --protocol icmp --jump ACCEPT
        iptables --insert FORWARD --protocol icmp --jump ACCEPT
        iptables --insert INPUT --protocol tcp --match multiport --dports 5201:5202 --jump ACCEPT
        iptables --insert OUTPUT --protocol tcp --match multiport --sports 5201:5202 --jump ACCEPT
        iptables --insert FORWARD --protocol tcp --match multiport --dports 5201:5202 --jump ACCEPT
        sleep infinity"
    image: quic_holepunch_docker
    privileged: true
    cap_add:
      - NET_ADMIN
    volumes:
      - /var/run/docker/netns:/var/run/docker/netns
    networks:
      relay_network:
        ipv4_address: 123.56.64.102
      nat_a_network:
        ipv4_address: 192.168.0.102

  clientA:
    depends_on:
      - clientA-nat
    command: >
      sh -c "\
        ip route del default && \
        ip route add default via 192.168.0.102 && \
        tc qdisc add dev eth0 root netem delay 20ms && \
        ./hp c 123.56.64.101:9595 & tail -f /dev/null"
    image: quic_holepunch_docker
    privileged: true
    cap_add:
      - NET_ADMIN
    volumes:
      - /var/run/docker/netns:/var/run/docker/netns
    networks:
      nat_a_network:
        ipv4_address: 192.168.0.101

  clientB-nat:
    depends_on:
      - clientA
    command: >
      sh -c "\
        iptables --append FORWARD --jump ACCEPT && \
        iptables --append INPUT --jump DROP && \
        iptables --append OUTPUT --jump DROP && \
        iptables --table nat --append POSTROUTING --source 192.168.1.0/24 --jump SNAT --to-source 123.56.64.103 && \
        iptables --insert INPUT --protocol icmp --jump ACCEPT
        iptables --insert OUTPUT --protocol icmp --jump ACCEPT
        iptables --insert FORWARD --protocol icmp --jump ACCEPT
        iptables --insert INPUT --protocol tcp --match multiport --dports 5201:5202 --jump ACCEPT
        iptables --insert OUTPUT --protocol tcp --match multiport --sports 5201:5202 --jump ACCEPT
        iptables --insert FORWARD --protocol tcp --match multiport --dports 5201:5202 --jump ACCEPT
        sleep infinity"
    image: quic_holepunch_docker
    privileged: true
    cap_add:
      - NET_ADMIN
    volumes:
      - /var/run/docker/netns:/var/run/docker/netns
    networks:
      relay_network:
        ipv4_address: 123.56.64.103
      nat_b_network:
        ipv4_address: 192.168.1.103

  clientB:
    depends_on:
      - clientB-nat
    command: >
      sh -c "\
        ip route del default && \
        ip route add default via 192.168.1.103 && \
        tc qdisc add dev eth0 root netem delay 20ms && \
        ./hp c 123.56.64.101:9595 & tail -f /dev/null"
    image: quic_holepunch_docker
    privileged: true
    cap_add:
      - NET_ADMIN
    volumes:
      - /var/run/docker/netns:/var/run/docker/netns
    networks:
      nat_b_network:
        ipv4_address: 192.168.1.101

networks:
  relay_network:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.enable_ip_masquerade: 'false'
    ipam:
      config:
        - subnet: 123.56.64.0/24
          ip_range: 123.56.64.100/24

  nat_a_network:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.enable_ip_masquerade: 'false'
    ipam:
      config:
        - subnet: 192.168.0.0/24
          ip_range: 192.168.0.100/24

  nat_b_network:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.enable_ip_masquerade: 'false'
    ipam:
      config:
        - subnet: 192.168.1.0/24
          ip_range: 192.168.1.100/24
